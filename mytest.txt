a = 1; a = -1; a=+1; 
	a = 1+1; a= 1-1; a=1*1; a=1/1; a=1\1; a=1%1;  
	a = 1.; a = 1.5; a = 1e2; a = 1e-2;
	a = 1 && 1; a = 1 || 1; a = !true;
class A{
}
class A{
	length:float;
	length:integer;	
	length:string;
	length:bool;
}
class A	{ 
	a = null; a = -1; a=+1; 
	a = 1+1; a= 1-1; a=1*1; a=1/1; a=1\1; a=1%1;  
	a = 1.; a = 1.5; a = 1e2; a = 1e-2;
	a = 1 && 1; a = 1 || 1; a = !true;
	a = true; a = false;
	a = 1==1.2; a = 1 <> 1; a = 1>1; a=1<1; a=1>=1; a=1<=1;
	a = (1==1); a=""; a="abc";
	a = 1[1];a=1[3+x.foo()];a=1[3+self.foo(2)];a=1[3+x.foo(2)];a=1[3+x.foo(2,2,3)];
	a = new a();a = new a(1,2);
	length:float;	
	length:integer;	
	length:string;
	length:bool;
	myArrayVar:int[5];
	my2ndVar, my3rdVar:Shape;
	my2ndArray, my3rdArray: Shape[6];
	
	immuAttribute = 0;
	void scale(s:integer);
	int scale(a,b,c:integer);
	bool scale(a,b,c:integer; d:float);
	float getArea();
	string getVolume(s:string;b:bool;a:int[5]);
	string getVolume(s:string;b:bool;a:int[5];a:int);
	 
}

class B extends A { 
	Shape(length,width:float);
}
NameOfClass::Contructor(){
}
NameOfClass::Contructor(x:integer){
	self.length := length\2;
	self.width := width;

}
integer Main::factorial(){
	
}
integer Main::factorial(n:integer; a,c,b:B){
	a = 1; a = -1; a=+1;
	a = 1+1; a= 1-1; a=1*1; a=1/1; a=1\1; a=1%1;  
	a = 1.; a = 1.5; a = 1e2; a = 1e-2;
	a = 1 && 1; a = 1 || 1; a = !true;
	a = true; a = false;
	a = 1==1; a = a <> 1; a = 1>1; a=1<1; a=1>=1; a=1<=1;
	a = (1==1); a="abc";
	a = 1[1];a=1[3+x.foo()];a=1[3+self.foo(2)];a=1[3+x.foo(2)];a=1[3+x.foo(2,2,3)];
	a = new a();
	length:float;	
	length:integer;	
	length:string;
	length:bool;
	myArrayVar:int[5];
	my2ndVar, my3rdVar:Shape;
	my2ndArray, my3rdArray: Shape[6];
	a:=r*r*myPI;a:="abc^abc\n\\\t\n"; 
}
void Main::main() {
	x:integer;
	{
	
	}
	{
		x:integer;
		x:integer;
		x := io.readInt();
	}
	{
		x := io.readInt();
		x := io.readInt();
	}
	{
		x:integer;
		x:integer;
		x := io.readInt();
		x := io.readInt();
		x := io.readInt();
		x := io.readInt();
	}
	x := io.readInt();
	aPI := 3.14;
	value := x.foo(5);
	l[3] := value * 2;a[3+x.foo(2)] :=1;a[3+x.foo(2)] :=a[3+x.foo(2)];
	
		if (a>=1) && (b<=1) then
			a:= 1;	
			
	if a<>null then
	{
	a:=null;
	}
	else
		if(true) then b:=1;
		
		
	if a==1 then
		if a[1]==1 then{
			a:=1;b:=2;}
		else
			b:=1;
	
		repeat
	
			if i>5 then
			{
				quitCondition := true;
				continue;
			}
			else
			i := i+1;
		until quitCondition;
		
	while flag
	do a:=1;
	for i := 1 to 100 do {
		a:=1;
		Intarray[i] := "i + 1";
		a:=1;
		break;
		if (a==b) then a:=1;
		x := io.readInt(2);
		x := io.readInt();
		return a;
	}
	while (a>b)
	do { 
		a:=1;
		b:=true;
		io.writeIntLn(self.factorial(x));
		io.writeIntLn();
	}
	
	s := new Rectangle(3,4);s:=self.factorial(x);
	io.writeIntLn(self.factorial(x));
	io.writeIntLn();#a[1].read(1);a[1].write(1);
	for x := 5 downto 2 do{
		io.writeIntLn(x);
		x.writeIntLn(x);x.writeIntLn(x,x);self.writeIntLn();self.writeIntLn(1);

	}
}
void Main::main() {
	s:Shape;b:bool;
	str := "abc^abc\n\\\t\n"; 
	s := new Rectangle(3,4);s := new Triangle(3,4);
	io.writeFloatLn(s.getArea());
	b := true;
	b := false;
}
#This is the method declaration part
integer Main::factorial(n:integer){

if n == 0 then return 1; else return n * self.factorial(n - 1);
}
void Main::main() {
x:integer;
x := io.readInt();
io.writeIntLn(self.factorial(x));
}
